/**************************************************************************
 *
 * Copyright (C) 2015 Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/ 

namespace atb
{

  template<typename DataT, int Dim, typename ResultT>
  Filter<DataT,Dim,ResultT>::Filter(
      BoundaryTreatmentType bt, DataT const &boundaryValue)
  {
    p_bt = BoundaryTreatmentFactory<DataT,Dim>::get(bt, boundaryValue);
  }
  
  template<typename DataT, int Dim, typename ResultT>
  Filter<DataT,Dim,ResultT>::~Filter()
  {
    delete p_bt;
  }
  
  template<typename DataT, int Dim, typename ResultT>
  BoundaryTreatment<DataT,Dim> const
  &Filter<DataT,Dim,ResultT>::boundaryTreatment() const
  {
    return *p_bt;
  }
  
  template<typename DataT, int Dim, typename ResultT>
  void Filter<DataT,Dim,ResultT>::setBoundaryTreatment(
      BoundaryTreatmentType bt, DataT const &boundaryValue)
  {
    delete p_bt;
    p_bt = BoundaryTreatmentFactory<DataT,Dim>::get(bt, boundaryValue);
  }

  template<typename DataT, int Dim, typename ResultT>
  void Filter<DataT,Dim,ResultT>::setBoundaryTreatment(
      BoundaryTreatment<DataT,Dim> const &bt)
  {
    delete p_bt;
    p_bt = bt.clone();
  }

  template<typename DataT, int Dim, typename ResultT>
  void Filter<DataT,Dim,ResultT>::apply(
      Array<DataT,Dim> const &data, Array<ResultT,Dim> &filtered,
      iRoCS::ProgressReporter *pr) const
  {
    filtered.setElementSizeUm(data.elementSizeUm());
    apply(data, data.elementSizeUm(), filtered, pr);
  }

}
