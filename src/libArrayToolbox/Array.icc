/**************************************************************************
 *
 * Copyright (C) 2015 Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/

namespace atb
{

  template<typename DataT, int Dim>
  Array<DataT,Dim>::Array(
      std::string const &fileName, std::string const &dataset,
      iRoCS::ProgressReporter *progress)
          : blitz::Array<DataT,Dim>(),
            p_interpolator(InterpolatorFactory<DataT,Dim>::get(LinearIP))
  {
    load(fileName, dataset, progress);
  }

  template<typename DataT, int Dim>
  Array<DataT,Dim>::~Array()
  {
    delete p_interpolator;
  }
  
  template<typename DataT, int Dim>
  Array<DataT,Dim> &Array<DataT,Dim>::operator=(Array<DataT,Dim> const &array)
  {
    blitz::Array<DataT,Dim>::operator=(array);
    return *this;
  }
  
  template<typename DataT, int Dim>
  Array<DataT,Dim> &Array<DataT,Dim>::operator=(
      blitz::Array<DataT,Dim> const &array)
  {
    blitz::Array<DataT,Dim>::operator=(array);
    return *this;
  }
  
  template<typename DataT, int Dim>
  template<typename T_expr>
  Array<DataT,Dim> &Array<DataT,Dim>::operator=(
      blitz::ETBase<T_expr> const &expr)
  {
    blitz::Array<DataT,Dim>::operator=(expr);
    return *this;
  }
  
  template<typename DataT, int Dim>
  Array<DataT,Dim>& Array<DataT,Dim>::filterDeriche(double sigmaUm, int dim)
  {
    if (dim >= Dim)
        throw RuntimeError()
            << "Cannot filter " << Dim << "-D Array along dimension " << dim;
    
    BoundaryTreatment<DataT,Dim> &bt = p_interpolator->boundaryTreatment();
    bool valuePad = (bt.type() == ValueBT);

    BlitzIndexT pad = valuePad ? static_cast<BlitzIndexT>(0) :
        static_cast<BlitzIndexT>(5.0 * sigmaUm / _elementSizeUm(dim) + 2.0);
    double alpha =
        5.0 / (2.0 * std::sqrt(M_PI) * sigmaUm / _elementSizeUm(dim));

    double expa = std::exp(-alpha);
    double exp2a = std::exp(-2.0 * alpha);
    double preFactor =
        std::pow((1.0 - expa), 2.0) / (1.0 + 2.0 * alpha * expa - exp2a);

    double boundaryFactor = 
        (1.0 + expa * (alpha - 1)) / (1.0 + 2.0 * alpha * expa - exp2a);

    typedef typename traits<DataT>::HighPrecisionT hp_t;
    
    hp_t boundaryValue = hp_t();
    if (valuePad) boundaryValue = hp_t(
        static_cast<ValueBoundaryTreatment<DataT,Dim>*>(&bt)->boundaryValue());

    BoundaryTreatment<hp_t,1> *hbt = BoundaryTreatmentFactory<hp_t,1>::get(
        bt.type(), hp_t(boundaryValue));
    ptrdiff_t length = static_cast<ptrdiff_t>(this->extent(dim));
    ptrdiff_t stride = static_cast<ptrdiff_t>(this->stride(dim));
#ifdef _OPENMP
#pragma omp parallel for
#endif
    for (ptrdiff_t i = 0;
         i < static_cast<ptrdiff_t>(this->size()) / length; ++i)
    {
      blitz::TinyVector<BlitzIndexT,Dim> pos;
      BlitzIndexT resid = static_cast<BlitzIndexT>(i);
      for (int d = Dim - 1; d >= 0; --d)
      {
        if (d != dim)
        {
          pos(d) = resid % this->extent(d);
          resid /= this->extent(d);
        }
      }
      pos(dim) = 0;
      
      DataT const *constLineIter = &(*this)(pos);
      
      // Copy the Array line into a temporary processing buffer
      hp_t *tmp = new hp_t[length];
      for (ptrdiff_t j = 0; j < length; ++j, constLineIter += stride)
          tmp[j] = hp_t(*constLineIter);
      
      /*-----------------------------------------------------------------
       *  Forward pass
       *-----------------------------------------------------------------*/
      hp_t *f = new hp_t[length];
      ptrdiff_t p;
      
      // Initialize f[0] and f[1]
      if (valuePad)
      {
        hp_t f_1(boundaryValue * boundaryFactor);
        p = 0;
        f[p] = preFactor *
            (expa * (alpha - 1.0) * boundaryValue + tmp[p]) +
            2.0 * expa * f_1 - exp2a * f_1;
        ++p;
        f[p] = preFactor *
            (expa * (alpha - 1.0) * tmp[p - 1] + tmp[p]) +
            2.0 * expa * f[p - 1] - exp2a * f_1;
        ++p;
      }
      else
      {
        hp_t f0, f_1, f_2;
        p = -pad - 1;
        f_2 = hbt->get(tmp, p - 1, length) * boundaryFactor;
        f_1 = hbt->get(tmp, p, length) * boundaryFactor;
        ++p;
        for (; p < 2; ++p)
        {
          f0 = preFactor *
              (expa * (alpha - 1.0) * hbt->get(tmp, p - 1, length) +
               hbt->get(tmp, p, length)) + 2.0 * expa * f_1 - exp2a * f_2;
          if (p >= 0) f[p] = f0;
          f_2 = f_1;
          f_1 = f0;
        }
      }
      
      for (; p < length; ++p)
      {
        f[p] = preFactor * (expa * (alpha - 1.0) * tmp[p - 1] + tmp[p]) +
            2.0 * expa * f[p - 1] - exp2a * f[p - 2];
      }
      
      /*-----------------------------------------------------------------
       *  Backward pass
       *-----------------------------------------------------------------*/ 
      hp_t g0, g1, g2;
      
      // Initialize g(n-1) and g(n-2)
      if (valuePad)
      {
        g1 = boundaryValue * boundaryFactor;
        p = length - 1;
        g0 = preFactor *
            (expa * (alpha + 1.0) * boundaryValue - exp2a * boundaryValue) +
            2.0 * expa * g1 - exp2a * g1;
        f[p] += g0;
        g2 = g1;
        g1 = g0;
        --p;
        g0 = preFactor *
            (expa * (alpha + 1.0) * tmp[p + 1] - exp2a * boundaryValue) +
            2.0 * expa * g1 - exp2a * g2;
        f[p] += g0;
        g2 = g1;
        g1 = g0;
        --p;
      }
      else
      {
        p = length + pad;
        g1 = hbt->get(tmp, p + 1, length) * boundaryFactor;
        g2 = hbt->get(tmp, p + 2, length) * boundaryFactor;
        for (; p > length - 3; --p)
        {
          g0 = preFactor *
              (expa * (alpha + 1.0) * hbt->get(tmp, p + 1, length) -
               exp2a * hbt->get(tmp, p + 2, length)) +
              2.0 * expa * g1 - exp2a * g2;
          if (p < length) f[p] += g0;
          g2 = g1;
          g1 = g0;
        }
      }
      
      for (; p >= 0; --p)
      {
        g0 = preFactor *
            (expa * (alpha + 1.0) * tmp[p + 1] - exp2a * tmp[p + 2]) +
            2.0 * expa * g1 - exp2a * g2;
        f[p] += g0;
        g2 = g1;
        g1 = g0;
      }
      
      DataT *lineIter = &(*this)(pos);
      for (ptrdiff_t j = 0; j < length; ++j, lineIter += stride)
          *lineIter = DataT(f[j]);
      
      delete[] tmp;
      delete[] f;
    }
    delete hbt;

    return *this;
  }
  
  template<typename DataT, int Dim>
  Array<DataT,Dim>& Array<DataT,Dim>::rescale(
      blitz::TinyVector<double,Dim> const &targetElementSizeUm,
      iRoCS::ProgressReporter *pr)
  {
    if (blitz::all(_elementSizeUm == targetElementSizeUm)) return *this;

    int pMin = (pr != NULL) ? pr->taskProgressMin() : 0;
    int pScale = (pr != NULL) ? pr->taskProgressMax() - pMin : 100;

    // Save this Array for possible undo
    Array<DataT,Dim> original;
    if (pr != NULL)
    {
      pr->updateProgress(pMin);
      original.resize(this->shape());
      original.setElementSizeUm(this->_elementSizeUm);
      original.setTransformation(this->_transformation);
      original.setInterpolator(*this->p_interpolator);
      std::memcpy(original.data(), this->data(), this->size() * sizeof(DataT));
      if (!pr->updateProgress(static_cast<int>(pMin + 0.02 * pScale)))
          return *this;
    }

    Array<DataT,Dim> tmp(
        this->shape(), this->_elementSizeUm, this->_transformation);
    tmp.setInterpolator(*this->p_interpolator);
    std::memcpy(tmp.data(), this->data(), this->size() * sizeof(DataT));
    if (pr != NULL)
    {
      if (!pr->updateProgress(
              static_cast<int>(pMin + 0.04 * pScale))) return *this;
      pr->setTaskProgressMin(pMin + 0.04 * pScale);
      pr->setTaskProgressMax(pMin + 0.64 * pScale);
    }

    blitz::TinyVector<double,Dim> scales(
        _elementSizeUm / targetElementSizeUm);
    for (int d = 0; d < Dim; ++d)
    {
      if (pr != NULL && !pr->updateProgress(
              static_cast<int>(
                  pr->taskProgressMin() +
                  static_cast<double>(d) / static_cast<double>(Dim - 1) *
                  (pr->taskProgressMax() - pr->taskProgressMin()))))
      {
        pr->setTaskProgressMin(pMin);
        pr->setTaskProgressMax(pMin + pScale);
        return *this;
      }
      if (scales(d) < 1.0) tmp.filterDeriche(
          _elementSizeUm(d) / (2.0 * scales(d)), d);
    }

    if (pr != NULL)
    {
      pr->setTaskProgressMin(pr->progress());
      pr->setTaskProgressMax(pMin + pScale);
    }
    this->resize(
        blitz::TinyVector<BlitzIndexT,Dim>(
            scales * blitz::TinyVector<double,Dim>(this->shape())));
    _elementSizeUm = targetElementSizeUm;

    BlitzIndexT p = 0;
#ifdef _OPENMP  
#pragma omp parallel for
#endif
    for (size_t i = 0; i < this->size(); ++i)
    {
      if (pr != NULL)
      {
        if (pr->isAborted()) continue;
        if (p % (this->size() / 1000) == 0)
            pr->updateProgress(
                static_cast<int>(
                    pr->taskProgressMin() + static_cast<double>(p) /
                    static_cast<double>(this->size() - 1) *
                    (pr->taskProgressMax() - pr->taskProgressMin())));
#ifdef _OPENMP
#pragma omp atomic
#endif
        ++p;
      }
      BlitzIndexT residual = i;
      blitz::TinyVector<double,Dim> pos;
      for (int d = Dim - 1; d >= 0; --d)
      {
        pos(d) = static_cast<double>(residual % this->extent(d)) / scales(d);
        residual /= this->extent(d);
      }
      this->data()[i] = tmp.interpolator().get(tmp, pos);    
    }
    if (pr != NULL)
    {
      pr->setTaskProgressMin(pMin);
      pr->setTaskProgressMax(pMin + pScale);
      pr->updateProgress(pr->taskProgressMax());
      if (pr->isAborted())
      {
        this->resize(original.shape());
        _elementSizeUm = (original.elementSizeUm());
        _transformation = original.transformation();
        std::memcpy(this->data(), original.data(),
                    this->size() * sizeof(DataT));
      }
    }
    return *this;
  }

  template<typename DataT, int Dim>
  void Array<DataT,Dim>::load(
      std::string const &fileName, std::string const &dataset,
      iRoCS::ProgressReporter *progress)
  {
    HDF5IOWrapper::readDataset(
        *this, _elementSizeUm, fileName, dataset, true, progress);
    try
    {
      BlitzH5File inFile(fileName);
      inFile.readAttribute(_transformation, "transformation", dataset);
    }
    catch (BlitzH5Error &)
    {
      std::cerr << "Warning: Could not read '" << fileName << ":" << dataset
                << "/transformation'. Assuming identity transformation"
                << std::endl;
    }
  }
  
  template<typename DataT, int Dim>
  void Array<DataT,Dim>::load(
      BlitzH5File const &inFile, std::string const &dataset,
      iRoCS::ProgressReporter *progress)
  {
    HDF5IOWrapper::readDataset(
        *this, _elementSizeUm, inFile, dataset, progress);
    try
    {
      inFile.readAttribute(_transformation, "transformation", dataset);
    }
    catch (BlitzH5Error &)
    {
      std::cerr << "Warning: Could not read '" << inFile.name() << ":"
                << dataset << "/transformation'. Assuming identity "
                << "transformation" << std::endl;
    }
  }
  
  template<typename DataT, int Dim>
  void Array<DataT,Dim>::save(
      std::string const &fileName, std::string const &dataset, int compression,
      iRoCS::ProgressReporter *progress) const
  {
    HDF5IOWrapper::writeDataset(
        *this, _elementSizeUm, fileName, dataset, true, compression, progress);
    BlitzH5File outFile(fileName, BlitzH5File::Write);
    outFile.writeAttribute(_transformation, "transformation", dataset);
  }

  template<typename DataT, int Dim>
  void Array<DataT,Dim>::save(
      BlitzH5File &outFile, std::string const &dataset, int compression,
      iRoCS::ProgressReporter *progress) const
  {
    HDF5IOWrapper::writeDataset(
        *this, _elementSizeUm, outFile, dataset, compression, progress);
    outFile.writeAttribute(_transformation, "transformation", dataset);
  }

  template<typename DataT, int Dim>
  blitz::TinyVector<double,Dim> Array<DataT,Dim>::lowerBoundUm() const
  {
    int nCorners = (1 << Dim);
    blitz::TinyVector<double,Dim> lb(std::numeric_limits<double>::infinity());
    for (int d = 0; d < nCorners; ++d)
    {
      blitz::TinyVector<double,Dim+1> cornerPosUm;
      int tmp = d;
      for (int d2 = Dim - 1; d2 >= 0; --d2)
      {
        cornerPosUm(d2) = ((tmp % 2) * this->extent(d2) - 0.5) *
            _elementSizeUm(d2);
        tmp /= 2;
      }
      cornerPosUm(Dim) = 1.0;
      cornerPosUm = invert(_transformation) * cornerPosUm;
      cornerPosUm /= cornerPosUm(Dim);
      for (int d2 = 0; d2 < Dim; ++d2)
          if (cornerPosUm(d2) < lb(d2)) lb(d2) = cornerPosUm(d2);
    }
    return lb;
  }
  
  template<typename DataT, int Dim>
  blitz::TinyVector<double,Dim> Array<DataT,Dim>::upperBoundUm() const
  {
    int nCorners = (1 << Dim);
    blitz::TinyVector<double,Dim> ub(-std::numeric_limits<double>::infinity());
    for (int d = 0; d < nCorners; ++d)
    {
      blitz::TinyVector<double,Dim+1> cornerPosUm;
      int tmp = d;
      for (int d2 = Dim - 1; d2 >= 0; --d2)
      {
        cornerPosUm(d2) = ((tmp % 2) * this->extent(d2) - 0.5) *
            _elementSizeUm(d2);
        tmp /= 2;
      }
      cornerPosUm(Dim) = 1.0;
      cornerPosUm = invert(_transformation) * cornerPosUm;
      cornerPosUm /= cornerPosUm(Dim);
      for (int d2 = 0; d2 < Dim; ++d2)
          if (cornerPosUm(d2) > ub(d2)) ub(d2) = cornerPosUm(d2);
    }
    return ub;
  }

  template<typename DataT, int Dim>
  DataT Array<DataT,Dim>::valueAt(
      blitz::TinyVector<double,Dim> const &positionUm) const
  {
    blitz::TinyVector<double,Dim+1> pos;
    for (int d = 0; d < Dim; ++d) pos(d) = positionUm(d);
    pos(Dim) = 1.0;
    pos = _transformation * pos;
    blitz::TinyVector<double,Dim> p;
    for (int d = 0; d < Dim; ++d) p(d) = pos(d) / pos(Dim) / _elementSizeUm(d);
    return p_interpolator->get(*this, p);
  }

}
