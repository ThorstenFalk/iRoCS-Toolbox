namespace atb
{
  
  template<typename DataT, int Dim>
  GaussianFilter<DataT,Dim>::GaussianFilter(
      BoundaryTreatmentType btType, DataT const &boundaryValue)
          : Filter<DataT,Dim,ResultT>(btType, boundaryValue),
            _standardDeviationUm(0.0), _minimumKernelShapePx(BlitzIndexT(0))
  {}

  template<typename DataT, int Dim>
  GaussianFilter<DataT,Dim>::GaussianFilter(
      blitz::TinyVector<double,Dim> const &standardDeviationUm,
      blitz::TinyVector<BlitzIndexT,Dim> const &minimumKernelShapePx,
      BoundaryTreatmentType btType, DataT const &boundaryValue)
          : Filter<DataT,Dim,ResultT>(btType, boundaryValue),
            _standardDeviationUm(standardDeviationUm),
            _minimumKernelShapePx(minimumKernelShapePx)
  {}

  template<typename DataT, int Dim>
  GaussianFilter<DataT,Dim>::~GaussianFilter()
  {}
  
  template<typename DataT, int Dim>
  blitz::TinyVector<double,Dim>
  GaussianFilter<DataT,Dim>::standardDeviationUm() const
  {
    return _standardDeviationUm;
  }
  
  template<typename DataT, int Dim>
  void GaussianFilter<DataT,Dim>::setStandardDeviationUm(
      blitz::TinyVector<double,Dim> const &standardDeviationUm)
  {
    _standardDeviationUm = standardDeviationUm;
  }

  template<typename DataT, int Dim>
  blitz::TinyVector<BlitzIndexT,Dim>
  GaussianFilter<DataT,Dim>::minimumKernelShapePx() const
  {
    return _minimumKernelShapePx;
  }

  template<typename DataT, int Dim>
  void GaussianFilter<DataT,Dim>::setMinimumKernelShapePx(
      blitz::TinyVector<BlitzIndexT,Dim> const &minimumKernelShapePx)
  {
    _minimumKernelShapePx = minimumKernelShapePx;
  }

  template<typename DataT, int Dim>
  void GaussianFilter<DataT,Dim>::apply(
      blitz::Array<DataT,Dim> const &data,
      blitz::TinyVector<double,Dim> const &elementSizeUm,
      blitz::Array<ResultT,Dim> &filtered,
      iRoCS::ProgressReporter *pr) const
  {
    SeparableConvolutionFilter<DataT,Dim> filter;
    filter.setBoundaryTreatment(*this->p_bt);
    std::vector< Array<DataT,1> > kernels(Dim);
    for (int d = 0; d < Dim; ++d)
    {
      if (_standardDeviationUm(d) > 0.0)
      {
        kernels[d].setElementSizeUm(elementSizeUm(d));
        _gaussian(
            kernels[d], _standardDeviationUm(d), _minimumKernelShapePx(d));
        filter.setKernelForDim(&kernels[d], d);
      }
    }
    filter.apply(data, elementSizeUm, filtered, pr);
  }

  template<typename DataT, int Dim>
  void GaussianFilter<DataT,Dim>::apply(
      blitz::Array<DataT,Dim> const &data,
      blitz::TinyVector<double,Dim> const &elementSizeUm,
      blitz::Array<ResultT,Dim> &filtered,
      blitz::TinyVector<double,Dim> const &standardDeviationUm,
      blitz::TinyVector<BlitzIndexT,Dim> const &minimumKernelShapePx,
      BoundaryTreatmentType btType,
      DataT const &boundaryValue, iRoCS::ProgressReporter *pr)
  {
    GaussianFilter<DataT,Dim> f(standardDeviationUm, minimumKernelShapePx,
                                btType, boundaryValue);
    f.apply(data, elementSizeUm, filtered, pr);
  }
  
  template<typename DataT, int Dim>
  void GaussianFilter<DataT,Dim>::apply(
      Array<DataT,Dim> const &data, Array<ResultT,Dim> &filtered,
       blitz::TinyVector<double,Dim> const &standardDeviationUm,
      blitz::TinyVector<BlitzIndexT,Dim> const &minimumKernelShapePx,
      BoundaryTreatmentType btType,
      DataT const &boundaryValue, iRoCS::ProgressReporter *pr)
  {
    GaussianFilter<DataT,Dim> f(standardDeviationUm, minimumKernelShapePx,
                                btType, boundaryValue);
    f.apply(data, filtered, pr);
  }

  template<typename DataT, int Dim>
  void GaussianFilter<DataT,Dim>::_gaussian(
      Array<DataT,1> &gauss, double sigmaUm, BlitzIndexT minExtent)
  {
    if (minExtent <= 0)
        gaussian(gauss, blitz::TinyVector<double,1>(sigmaUm),
                 gauss.elementSizeUm(), NORMALIZE);
    else
    {
      if (minExtent % 2 == 0) minExtent++;
      BlitzIndexT shapePx =
          std::max(minExtent, 2 * static_cast<BlitzIndexT>(
                       3.0 * sigmaUm / gauss.elementSizeUm()(0)) + 1);
      gauss.resize(shapePx);
      gaussian(
          gauss, blitz::TinyVector<double,1>(sigmaUm), gauss.elementSizeUm(),
          NORESIZE | NORMALIZE);
    }
  }

}
