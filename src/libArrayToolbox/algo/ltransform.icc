/**************************************************************************
 *
 * Copyright (C) 2015 Kun Liu, Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/

template<typename LabelT, int Dim>
void randomColorMapping(
    blitz::Array<LabelT,Dim> &L,
    blitz::Array<unsigned char,Dim+1> &randomColor)
{
  LabelT maxLabel = blitz::max(L);
  blitz::TinyVector<unsigned char, 3> *colorMap =
      new blitz::TinyVector<unsigned char, 3>[maxLabel + 1];
  colorMap[0] = blitz::TinyVector<unsigned char, 3>(10, 10, 10);
  colorMap[1] = blitz::TinyVector<unsigned char, 3>(0, 0, 0);
  for (int i = 2; i < maxLabel + 1; i++)
  {
    unsigned char red = float(std::rand()) / RAND_MAX * 150 + 100;
    unsigned char green = float(std::rand()) / RAND_MAX * 150 + 100;
    unsigned char blue = float(std::rand()) / RAND_MAX * 150 + 100;
    colorMap[i] = blitz::TinyVector<unsigned char, 3>(red, green, blue);
  }

  typename blitz::Array<unsigned char, 1 + Dim>::iterator it =
      randomColor.begin();
  typename blitz::Array<LabelT, Dim>::iterator it2 = L.begin();
  for (; it2 != L.end(); it2++)
  {
    *it++ = (colorMap[*it2])(0);
    *it++ = (colorMap[*it2])(1);
    *it++ = (colorMap[*it2])(2);
  }
  delete[] colorMap;
}
