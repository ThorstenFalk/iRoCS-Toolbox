/**************************************************************************
 *
 * Copyright (C) 2015 Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/

namespace atb
{

  template<typename DataT, int Dim>
  void gaussian(blitz::Array<DataT,Dim> &gauss,
                blitz::TinyVector<double,Dim> const &sigmaUm,
                blitz::TinyVector<double,Dim> const &elementSizeUm,
                int flags)
  {
    assert(blitz::all(sigmaUm >= 0));
    assert(blitz::all(elementSizeUm > 0));
    if (blitz::any(elementSizeUm > sigmaUm * 2.0 && sigmaUm != 0.0) &&
        (flags & FORCESAMPLING) == FORCESAMPLING)
    {
#ifdef _OPENMP
#pragma omp critical (consoleout)
#endif
      std::cerr << "WARNING: You requested a Gaussian with standard "
                << "deviation " << sigmaUm << " microns which is below the "
                << "image resolution of " << elementSizeUm << " microns/voxel. "
                << "The resulting function should not be expected to have "
                << "anything in common with a Gaussian!" << std::endl;
    }
    blitz::TinyVector<double,Dim> mean(0.0);
    if ((flags & NORESIZE) == 0) 
    {
      blitz::TinyVector<ptrdiff_t,Dim> filterSize;
      for (int d = 0; d < Dim; ++d)
      {
        filterSize(d) = (sigmaUm(d) > 0) ?
            (6 * blitz::TinyVector<ptrdiff_t,Dim>(
                sigmaUm / elementSizeUm + 1.0) + 1)(d) : 1;
      }
      gauss.resize(filterSize);
    }
    blitz::TinyVector<double,Dim> c = (
        blitz::TinyVector<double,Dim>(gauss.shape()) / 2.0 - 0.5) *
        elementSizeUm;

#ifdef _OPENMP
#pragma omp parallel for
#endif
    for (ptrdiff_t i = 0; i < static_cast<ptrdiff_t>(gauss.size()); ++i)
    {
      blitz::TinyVector<ptrdiff_t,Dim> p;
      ptrdiff_t tmp = i;
      for (int d = Dim - 1; d >= 0; --d)
      {
        p(d) = tmp % gauss.extent(d);
        tmp /= gauss.extent(d);
      }
      blitz::TinyVector<double,Dim> pos(
          blitz::TinyVector<double,Dim>(p) * elementSizeUm - c);
      gauss.data()[i] = 1.0;
      for (int d = 0; d < Dim; ++d)
      {
        if (sigmaUm(d) == 0.0)
        {
          if ((pos(d) + elementSizeUm(d) / 2.0 < 0.0 ||
               pos(d) - elementSizeUm(d) / 2.0 > 0.0))
          {
            gauss.data()[i] = static_cast<DataT>(0.0);
            break;
          }
        }
        else if ((flags & FORCESAMPLING) == 0)
        {
          gauss.data()[i] *=
              static_cast<DataT>(
                  0.5 * (erfbase((pos(d) + elementSizeUm(d) / 2.0) /
                                 (std::sqrt(2.0) * sigmaUm(d)), Erf) -
                         erfbase((pos(d) - elementSizeUm(d) / 2.0) /
                                 (std::sqrt(2.0) * sigmaUm(d)), Erf)));
        }
        else gauss.data()[i] *= static_cast<DataT>(
            gaussian(pos(d), mean(d), sigmaUm(d)));
      }
    }
    if ((flags & NORMALIZE) == NORMALIZE)
        gauss /= static_cast<DataT>(blitz::sum(gauss));
  }

  template<typename DataT, int Dim>
  void gaussian(Array<DataT,Dim>& gauss,
                blitz::TinyVector<double,Dim> const &sigmaUm,
                int flags)
  {
    gaussian(gauss, sigmaUm, gauss.elementSizeUm(), flags);
  }

  template<typename DataT, int Dim>
  void gaussianDerivative(
      blitz::Array<DataT,Dim> &gauss,
      blitz::TinyVector<double,Dim> const &sigmaUm,
      blitz::TinyVector<double,Dim> const &elementSizeUm,
      blitz::TinyVector<int,Dim> const &d,
      int flags)
  {
    assert(blitz::all(sigmaUm > 0.0));
    assert(blitz::all(elementSizeUm > 0.0));
    if (blitz::any(elementSizeUm > sigmaUm * 2.0))
    {
#ifdef _OPENMP
#pragma omp critical (consoleout)
#endif
      std::cerr << "WARNING: You requested a Gaussian derivative with standard "
                << "deviation " << sigmaUm << " microns which is below the "
                << "image resolution of " << elementSizeUm << " microns/voxel. "
                << "The resulting function should not be expected to have "
                << "anything in common with a Gaussian derivative!"
                << std::endl;
    }
    assert(blitz::all(d >= 0));
    blitz::TinyVector<double,Dim> mean;
    mean = 0.0;
    if ((flags & NORESIZE) == 0) 
    {
      blitz::TinyVector<ptrdiff_t,Dim> filterSize;
      filterSize = 6 * (d + 1) *
          blitz::TinyVector<ptrdiff_t,Dim>(sigmaUm / elementSizeUm + 1.0) + 1;
      gauss.resize(filterSize);
    }
    blitz::TinyVector<double,Dim> c =
        (blitz::TinyVector<double,Dim>(gauss.shape()) / 2.0 - 0.5) *
        elementSizeUm;

#ifdef _OPENMP
#pragma omp parallel for
#endif
    for (ptrdiff_t i = 0; i < static_cast<ptrdiff_t>(gauss.size()); ++i)
    {
      blitz::TinyVector<ptrdiff_t,Dim> p;
      ptrdiff_t tmp = i;
      for (int d2 = Dim - 1; d2 >= 0; --d2)
      {
        p(d2) = tmp % gauss.extent(d2);
        tmp /= gauss.extent(d2);
      }
      blitz::TinyVector<double,Dim> pos(
          blitz::TinyVector<double,Dim>(p) * elementSizeUm - c);
      gauss.data()[i] = 1.0;
      for (int dim = 0; dim < Dim; ++dim)
      {
        if (d(dim) == 0)
        {
          gauss.data()[i] *=
              static_cast<DataT>(
                  0.5 * (erfbase((pos(dim) + elementSizeUm(dim) / 2.0) /
                                 (std::sqrt(2.0) * sigmaUm(dim)), Erf) -
                         erfbase((pos(dim) - elementSizeUm(dim) / 2.0) /
                                 (std::sqrt(2.0) * sigmaUm(dim)), Erf)));
        }
        else if ((flags & FORCESAMPLING) == 0)
        {
          gauss.data()[i] *=
              static_cast<DataT>(
                  gaussianDerivative(pos(dim) + elementSizeUm(dim) / 2.0,
                                     mean(dim), sigmaUm(dim), d(dim) - 1) -
                  gaussianDerivative(pos(dim) - elementSizeUm(dim) / 2.0,
                                     mean(dim), sigmaUm(dim), d(dim) - 1));
        }
        else gauss.data()[i] *= static_cast<DataT>(
            gaussianDerivative(
                pos(dim), mean(dim), sigmaUm(dim), d(dim)));
      }
    }
  }

  template<typename DataT, int Dim>
  void gaussianDerivative(Array<DataT,Dim>& gauss,
                          blitz::TinyVector<double,Dim> const &sigmaUm,
                          blitz::TinyVector<int,Dim> const &d,
                          int flags)
  {
    gaussianDerivative(gauss, sigmaUm, gauss.elementSizeUm(), d, flags);
  }
  
}
