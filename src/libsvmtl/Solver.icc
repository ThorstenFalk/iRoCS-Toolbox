/**************************************************************************
**       Title: Optimizer / Solver
**    $RCSfile$
**   $Revision: 509 $$Name$
**       $Date: 2004-09-03 13:35:04 +0200 (Fri, 03 Sep 2004) $
**   Copyright: GPL $Author: ronneber $
** Description:
**
**    
**
**-------------------------------------------------------------------------
**
**  $Log$
**  Revision 1.2  2004/09/03 11:35:04  ronneber
**  - replaced Chi-Jen Lin's own min,max,swap with std::min,
**    std::max. std::swap to compile with programs, that "#include
**    <algorithm>" and do a "using namespace std;"
**
**  Revision 1.1  2004/08/26 08:36:59  ronneber
**  initital import
**
**  Revision 1.5  2003/05/19 11:21:47  ronneber
**  - store iterations in solution info
**
**  Revision 1.4  2002/05/08 15:10:38  ronneber
**  - calculate_rho now writes its results to the passed SolutionInfo
**    struct (to get rid of the errornous private copy of si in SolverNu)
**  - removed debugging output
**
**  Revision 1.3  2002/05/08 10:36:11  ronneber
**  - added some debugging stuff
**
**  Revision 1.2  2002/05/06 12:24:31  ronneber
**  - removed debugging output
**
**  Revision 1.1  2002/03/26 12:44:02  ronneber
**  restructured for autoconf
**
**  Revision 1.1  2002/03/13 14:01:19  pigorsch
**  * initial revision
**
**
**
**************************************************************************/

template< typename FV, typename KF>
void svt::Solver<FV,KF>::swap_index(int i, int j)
{
	Q->swap_index(i,j);
	std::swap(y[i],y[j]);
	std::swap(G[i],G[j]);
	std::swap(alpha_status[i],alpha_status[j]);
	std::swap(alpha[i],alpha[j]);
	std::swap(b[i],b[j]);
	std::swap(active_set[i],active_set[j]);
	std::swap(G_bar[i],G_bar[j]);
}

template< typename FV, typename KF>
void svt::Solver<FV,KF>::reconstruct_gradient()
{
	// reconstruct inactive elements of G from G_bar and free variables

	if(active_size == l) return;

	int i;
	for(i=active_size;i<l;i++)
		G[i] = G_bar[i] + b[i];
	
	for(i=0;i<active_size;i++)
		if(is_free(i))
		{
			const Qfloat *Q_i = Q->get_Q(i,l);
			double alpha_i = alpha[i];
			for(int j=active_size;j<l;j++)
				G[j] += alpha_i * Q_i[j];
		}
}

template< typename FV, typename KF>
void svt::Solver<FV,KF>::Solve(int l, const Kernel<FV,KF>& Q, 
                               const double *b_, const schar *y_,
                               double *alpha_, double Cp, double Cn, 
                               double eps, SolutionInfo* si, int shrinking,
                               ProgressReporter* progressReporter)
{
	this->l = l;
	this->Q = &Q;
	clone(b, b_,l);
	clone(y, y_,l);
	clone(alpha,alpha_,l);
	this->Cp = Cp;
	this->Cn = Cn;
	this->eps = eps;
	unshrinked = false;

	// initialize alpha_status
	{
		alpha_status = new char[l];
		for(int i=0;i<l;i++)
			update_alpha_status(i);
	}

	// initialize active set (for shrinking)
	{
		active_set = new int[l];
		for(int i=0;i<l;i++)
			active_set[i] = i;
		active_size = l;
	}

	// initialize gradient
	{
		G = new double[l];
		G_bar = new double[l];
		int i;
		for(i=0;i<l;i++)
		{
			G[i] = b[i];
			G_bar[i] = 0;
		}
		for(i=0;i<l;i++)
			if(!is_lower_bound(i))
			{
				Qfloat *Q_i = Q.get_Q(i,l);
				double alpha_i = alpha[i];
				int j;
				for(j=0;j<l;j++)
					G[j] += alpha_i*Q_i[j];
				if(is_upper_bound(i))
					for(j=0;j<l;j++)
						G_bar[j] += get_C(i) * Q_i[j];
			}
	}

	// optimization step

	int iter = 0;
	int counter = std::min(l,1000)+1;

	while(1)
	{
		// show progress and do shrinking

		if(--counter == 0)
		{
			counter = std::min(l,1000);
			if(shrinking) do_shrinking();
                        if( progressReporter != 0)
                        {
                          progressReporter->reportProgress( 
                              TASK_LEVEL_TWOCLASS, 
                              "training Two-Class SVM", -1, ".");
                        }
                        
		}

		int i,j;
		if(select_working_set(i,j)!=0)
		{
			// reconstruct the whole gradient
			reconstruct_gradient();
			// reset active set size and check
			active_size = l;
                        if( progressReporter != 0)
                        {
                          progressReporter->reportProgress(
                              TASK_LEVEL_TWOCLASS,  "training Two-Class SVM",
                              -1, "*");
                        }
			if(select_working_set(i,j)!=0)
				break;
			else
				counter = 1;	// do shrinking next iteration
		}
		
		++iter;

		// update alpha[i] and alpha[j], handle bounds carefully
		
		const Qfloat *Q_i = Q.get_Q(i,active_size);
		const Qfloat *Q_j = Q.get_Q(j,active_size);

		double C_i = get_C(i);
		double C_j = get_C(j);

		double old_alpha_i = alpha[i];
		double old_alpha_j = alpha[j];

		if(y[i]!=y[j])
		{
			double delta = (-G[i]-G[j])/std::max(Q_i[i]+Q_j[j]+2*Q_i[j],(Qfloat)0);
			double diff = alpha[i] - alpha[j];
			alpha[i] += delta;
			alpha[j] += delta;
			
			if(diff > 0)
			{
				if(alpha[j] < 0)
				{
					alpha[j] = 0;
					alpha[i] = diff;
				}
			}
			else
			{
				if(alpha[i] < 0)
				{
					alpha[i] = 0;
					alpha[j] = -diff;
				}
			}
			if(diff > C_i - C_j)
			{
				if(alpha[i] > C_i)
				{
					alpha[i] = C_i;
					alpha[j] = C_i - diff;
				}
			}
			else
			{
				if(alpha[j] > C_j)
				{
					alpha[j] = C_j;
					alpha[i] = C_j + diff;
				}
			}
		}
		else
		{
			double delta = (G[i]-G[j])/std::max(Q_i[i]+Q_j[j]-2*Q_i[j],(Qfloat)0);
			double sum = alpha[i] + alpha[j];
			alpha[i] -= delta;
			alpha[j] += delta;
			if(sum > C_i)
			{
				if(alpha[i] > C_i)
				{
					alpha[i] = C_i;
					alpha[j] = sum - C_i;
				}
			}
			else
			{
				if(alpha[j] < 0)
				{
					alpha[j] = 0;
					alpha[i] = sum;
				}
			}
			if(sum > C_j)
			{
				if(alpha[j] > C_j)
				{
					alpha[j] = C_j;
					alpha[i] = sum - C_j;
				}
			}
			else
			{
				if(alpha[i] < 0)
				{
					alpha[i] = 0;
					alpha[j] = sum;
				}
			}
		}

		// update G

		double delta_alpha_i = alpha[i] - old_alpha_i;
		double delta_alpha_j = alpha[j] - old_alpha_j;
		
		for(int k=0;k<active_size;k++)
		{
			G[k] += Q_i[k]*delta_alpha_i + Q_j[k]*delta_alpha_j;
		}

		// update alpha_status and G_bar

		{
			bool ui = is_upper_bound(i);
			bool uj = is_upper_bound(j);
			update_alpha_status(i);
			update_alpha_status(j);
			int k;
			if(ui != is_upper_bound(i))
			{
				Q_i = Q.get_Q(i,l);
				if(ui)
					for(k=0;k<l;k++)
						G_bar[k] -= C_i * Q_i[k];
				else
					for(k=0;k<l;k++)
						G_bar[k] += C_i * Q_i[k];
			}

			if(uj != is_upper_bound(j))
			{
				Q_j = Q.get_Q(j,l);
				if(uj)
					for(k=0;k<l;k++)
						G_bar[k] -= C_j * Q_j[k];
				else
					for(k=0;k<l;k++)
						G_bar[k] += C_j * Q_j[k];
			}
		}
	}

	// calculate rho

	si->rho = calculate_rho();

	// calculate objective value
	{
		double v = 0;
		int i;
		for(i=0;i<l;i++)
			v += alpha[i] * (G[i] + b[i]);

		si->obj = v/2;
	}

	// put back the solution
	{
		for(int i=0;i<l;i++)
			alpha_[active_set[i]] = alpha[i];
	}

	// juggle everything back
	/*{
		for(int i=0;i<l;i++)
			while(active_set[i] != i)
				swap_index(i,active_set[i]);
				// or Q.swap_index(i,active_set[i]);
	}*/

	si->upper_bound_p = Cp;
	si->upper_bound_n = Cn;

	// info("\noptimization finished, #iter = %d\n",iter);

        /*-----------------------------------------------------------------
         *  save iterations to solution info
         *-----------------------------------------------------------------*/
        si->iter = iter;
        

	delete[] b;
	delete[] y;
	delete[] alpha;
	delete[] alpha_status;
	delete[] active_set;
	delete[] G;
	delete[] G_bar;
}

// return 1 if already optimal, return 0 otherwise
template< typename FV, typename KF>
int svt::Solver<FV,KF>::select_working_set(int &out_i, int &out_j)
{
	// return i,j which maximize -grad(f)^T d , under constraint
	// if alpha_i == C, d != +1
	// if alpha_i == 0, d != -1

	double Gmax1 = -INF;		// max { -grad(f)_i * d | y_i*d = +1 }
	int Gmax1_idx = -1;

	double Gmax2 = -INF;		// max { -grad(f)_i * d | y_i*d = -1 }
	int Gmax2_idx = -1;

	for(int i=0;i<active_size;i++)
	{
		if(y[i]==+1)	// y = +1
		{
			if(!is_upper_bound(i))	// d = +1
			{
				if(-G[i] > Gmax1)
				{
					Gmax1 = -G[i];
					Gmax1_idx = i;
				}
			}
			if(!is_lower_bound(i))	// d = -1
			{
				if(G[i] > Gmax2)
				{
					Gmax2 = G[i];
					Gmax2_idx = i;
				}
			}
		}
		else		// y = -1
		{
			if(!is_upper_bound(i))	// d = +1
			{
				if(-G[i] > Gmax2)
				{
					Gmax2 = -G[i];
					Gmax2_idx = i;
				}
			}
			if(!is_lower_bound(i))	// d = -1
			{
				if(G[i] > Gmax1)
				{
					Gmax1 = G[i];
					Gmax1_idx = i;
				}
			}
		}
	}

	if(Gmax1+Gmax2 < eps)
 		return 1;

	out_i = Gmax1_idx;
	out_j = Gmax2_idx;
	return 0;
}

template< typename FV, typename KF>
void svt::Solver<FV,KF>::do_shrinking()
{
	int i,j,k;
	if(select_working_set(i,j)!=0) return;
	double Gm1 = -y[j]*G[j];
	double Gm2 = y[i]*G[i];

	// shrink
	
	for(k=0;k<active_size;k++)
	{
		if(is_lower_bound(k))
		{
			if(y[k]==+1)
			{
				if(-G[k] >= Gm1) continue;
			}
			else	if(-G[k] >= Gm2) continue;
		}
		else if(is_upper_bound(k))
		{
			if(y[k]==+1)
			{
				if(G[k] >= Gm2) continue;
			}
			else	if(G[k] >= Gm1) continue;
		}
		else continue;

		--active_size;
		swap_index(k,active_size);
		--k;	// look at the newcomer
	}

	// unshrink, check all variables again before final iterations

	if(unshrinked || -(Gm1 + Gm2) > eps*10) return;
	
	unshrinked = true;
	reconstruct_gradient();

	for(k=l-1;k>=active_size;k--)
	{
		if(is_lower_bound(k))
		{
			if(y[k]==+1)
			{
				if(-G[k] < Gm1) continue;
			}
			else	if(-G[k] < Gm2) continue;
		}
		else if(is_upper_bound(k))
		{
			if(y[k]==+1)
			{
				if(G[k] < Gm2) continue;
			}
			else	if(G[k] < Gm1) continue;
		}
		else continue;

		swap_index(k,active_size);
		active_size++;
		++k;	// look at the newcomer
	}
}

template< typename FV, typename KF>
double svt::Solver<FV,KF>::calculate_rho()
{
	double r;
	int nr_free = 0;
	double ub = INF, lb = -INF, sum_free = 0;
	for(int i=0;i<active_size;i++)
	{
		double yG = y[i]*G[i];

		if(is_lower_bound(i))
		{
			if(y[i] > 0)
				ub = std::min(ub,yG);
			else
				lb = std::max(lb,yG);
		}
		else if(is_upper_bound(i))
		{
			if(y[i] < 0)
				ub = std::min(ub,yG);
			else
				lb = std::max(lb,yG);
		}
		else
		{
			++nr_free;
			sum_free += yG;
		}
	}

	if(nr_free>0)
		r = sum_free/nr_free;
	else
		r = (ub+lb)/2;

	return r;
}



// old libsvmtl code:
//   
//   template< typename FV, typename KQ>
//   svt::Solver<FV, KQ>::
//   Solver()
//   {}
//   
//   template< typename FV, typename KQ>
//   svt::Solver<FV, KQ>::
//   ~Solver()
//   {}
//   
//   
//   
//   template< typename FV, typename KQ>
//   void
//   svt::Solver<FV, KQ>::
//   Solve(
//       int l, 
//       KQ* Q, 
//       const std::vector<double>& b_, 
//       const std::vector<signed char>& y_,
//       std::vector<double>& alpha_, 
//       double Cp, 
//       double Cn, 
//       double eps,
//       SolutionInfo& si, 
//       bool shrinking)
//   {
//     // for debugging
//     //   std::cout << "Solve called:\n";
//     //   std::cout << "l      = " << l << endl;
//     //   std::cout << "b_     = "; print_array( b_, l);
//     //   std::cout << "y_     = "; print_array( y_, l);
//     //   std::cout << "alpha_ = "; print_array( alpha_, l);
//     //   std::cout << "Cp     = " << Cp << endl;
//     //   std::cout << "Cn     = " << Cn << endl;
//     //   std::cout << "eps    = " << eps << endl;
//   
//     this->p_Q=Q;
//     this->b=b_;
//     this->y=y_;
//     this->alpha=alpha_;
//     this->l=l;
//     this->Cp=Cp;
//     this->Cn=Cn;
//     this->eps=eps;
//     unshrinked=false;
//   
//     // initialize alpha_status
//     alpha_status=new char[l];
//     for (int i=0; i<l; i++)
//     {
//       update_alpha_status(i);
//     }
//               
//     // initialize active set (for shrinking)
//     active_set=new int[l];
//     for (int i=0; i<l; i++)
//     {
//       active_set[i]=i;
//     }
//     
//     active_size=l;
//               
//     // initialize gradient
//     G=new double[l];
//     G_bar=new double[l];
//               
//     for (int i=0; i<l; i++)
//     {
//       G[i]=b[i];
//       G_bar[i]=0;
//     }
//               
//     for (int i=0; i<l; i++)
//     {
//       if (!is_lower_bound(i))
//       {
//         float *Q_i=p_Q->get_Q(i, l);
//         
//         double alpha_i=alpha[i];
//         
//         for (int j=0; j<l; j++)
//         {
//   //        cout << "Q_i[j] (i=" << i <<",j=" << j << ") = "<<  *Q_i << endl;
//           G[j]+=alpha_i*Q_i[j];
//         }
//         
//         if (is_upper_bound(i))
//         {
//           for (int j=0; j<l; j++)
//           {
//             G_bar[j]+=get_C(i)*Q_i[j];
//           }
//         }
//       }
//     }
//     
//   //  print_internals();
//     
//     // optimization step
//               
//     int iter=0;
//     int counter=std::min(l, 1000)+1;
//               
//     while (1)
//     {
//       // show progress and do shrinking
//                 
//       if (--counter==0)
//       {
//         counter=std::min(l, 1000);
//         if (shrinking) do_shrinking();
//   
//         /* /todo create overloadable increaseProgressBar() method */
//         //      cerr << ".";
//       }
//                 
//       int i, j;
//       if (select_working_set(i, j)!=0)
//       {
//         // reconstruct the whole gradient
//         reconstruct_gradient();
//         // reset active set size and check
//         active_size=l;
//                
//   //      print_internals();
//         
//         if (select_working_set(i, j)!=0)
//         {
//           break;
//         }
//         else
//         {
//           counter=1;	// do shrinking next iteration
//         }
//       }
//                 
//       ++iter;
//                 
//       // update alpha[i] and alpha[j], handle bounds carefully
//                 
//       const float* Q_i=p_Q->get_Q(i, active_size);
//       const float* Q_j=p_Q->get_Q(j, active_size);
//                 
//       double C_i=get_C(i);
//       double C_j=get_C(j);
//                 
//       double old_alpha_i=alpha[i];
//       double old_alpha_j=alpha[j];
//                 
//       if (y[i]!=y[j])
//       {
//         double delta=(-G[i]-G[j])/(Q_i[i]+Q_j[j]+2*Q_i[j]);
//         double diff=alpha[i]-alpha[j];
//         alpha[i]+=delta;
//         alpha[j]+=delta;
//                   
//         if (diff>0)
//         {
//           if (alpha[j]<0)
//           {
//             alpha[j]=0;
//             alpha[i]=diff;
//           }
//         }
//         else
//         {
//           if (alpha[i]<0)
//           {
//             alpha[i]=0;
//             alpha[j]=-diff;
//           }
//         }
//         if (diff>C_i-C_j)
//         {
//           if (alpha[i]>C_i)
//           {
//             alpha[i]=C_i;
//             alpha[j]=C_i-diff;
//           }
//         }
//         else
//         {
//           if (alpha[j]>C_j)
//           {
//             alpha[j]=C_j;
//             alpha[i]=C_j+diff;
//           }
//         }
//       }
//       else
//       {
//         double delta=(G[i]-G[j])/(Q_i[i]+Q_j[j]-2*Q_i[j]);
//         double sum=alpha[i]+alpha[j];
//         alpha[i]-=delta;
//         alpha[j]+=delta;
//         if (sum>C_i)
//         {
//           if (alpha[i]>C_i)
//           {
//             alpha[i]=C_i;
//             alpha[j]=sum-C_i;
//           }
//         }
//         else
//         {
//           if (alpha[j]<0)
//           {
//             alpha[j]=0;
//             alpha[i]=sum;
//           }
//         }
//         if (sum>C_j)
//         {
//           if (alpha[j]>C_j)
//           {
//             alpha[j]=C_j;
//             alpha[i]=sum-C_j;
//           }
//         }
//         else
//         {
//           if (alpha[i]<0)
//           {
//             alpha[i]=0;
//             alpha[j]=sum;
//           }
//         }
//       }
//                 
//       // update G
//                 
//       double delta_alpha_i=alpha[i]-old_alpha_i;
//       double delta_alpha_j=alpha[j]-old_alpha_j;
//                 
//       for (int k=0; k<active_size; k++)
//       {
//         G[k]+=Q_i[k]*delta_alpha_i+Q_j[k]*delta_alpha_j;
//       }
//                 
//       // update alpha_status and G_bar
//                 
//       {
//         bool ui=is_upper_bound(i);
//         bool uj=is_upper_bound(j);
//         update_alpha_status(i);
//         update_alpha_status(j);
//                   
//         if (ui!=is_upper_bound(i))
//         {
//           Q_i=p_Q->get_Q(i, l);
//           if (ui)
//           {
//             for (int k=0; k<l; k++)
//             {
//               G_bar[k]-=C_i*Q_i[k];
//             }
//           }
//           else
//           {
//             for (int k=0; k<l; k++)
//             {
//               G_bar[k]+=C_i*Q_i[k];
//             }
//           }
//         }
//                   
//         if (uj!=is_upper_bound(j))
//         {
//           Q_j=p_Q->get_Q(j, l);
//           if (uj)
//           {
//             for (int k=0; k<l; k++)
//             {
//               G_bar[k]-=C_j*Q_j[k];
//             }
//           }
//           else
//           {
//             for (int k=0; k<l; k++)
//             {
//               G_bar[k]+=C_j*Q_j[k];
//             }
//           }
//         }
//       }
//   
//     }
//               
//     // calculate rho (and r for nu-SVM)
//     calculate_rho( si);
//               
//     // calculate objective value
//     {
//       double v=0;
//       for (int i=0; i<l; i++)
//       {
//         v+=alpha[i]*(G[i]+b[i]);
//       }
//       si.obj=v/2;
//     }
//               
//     // put back the solution
//     for (int i=0; i<l; i++)
//     {
//       alpha_[active_set[i]]=alpha[i];
//     }
//     
//     // juggle everything back
//     /*{
//       for (int i=0; i<l; i++)
//       while(active_set[i] != i)
//       swap_index(i,active_set[i]);
//       //or Q.swap_index(i,active_set[i]);
//     }*/
//               
//     si.upper_bound_p=Cp;
//     si.upper_bound_n=Cn;
//   //  std::cout << "si.obj = " << si.obj << endl;
//   //  std::cout << "si.rho = " << si.rho << endl;
//   //  std::cout << "si.upper_bound_p = " << si.upper_bound_p << endl;
//   //  std::cout << "si.upper_bound_n = " << si.upper_bound_n << endl;
//   //  std::cout << "si.r   = " << si.r << endl;
//               
//   //  cerr << "\noptimization finished, #iter=" << iter << std::endl;
//     si.iter = iter;
//   }
//   
//   template< typename FV, typename KQ>
//   double
//   svt::Solver<FV, KQ>::
//   get_C(int i) const
//   {
//     return (y[i]>0) ? Cp : Cn;
//   }
//   
//   template< typename FV, typename KQ>
//   void
//   svt::Solver<FV, KQ>::
//   update_alpha_status(int i)
//   {
//     if (alpha[i]>=get_C(i))
//     {
//       alpha_status[i]=UPPER_BOUND;
//     }
//     else if (alpha[i] <= 0)
//     {
//       alpha_status[i]=LOWER_BOUND;
//     }
//     else 
//     {
//       alpha_status[i]=FREE;
//     }
//   }
//   
//   template< typename FV, typename KQ>
//   bool
//   svt::Solver<FV, KQ>::
//   is_upper_bound(int i) const 
//   { 
//     return alpha_status[i]==UPPER_BOUND; 
//   }
//   
//   template< typename FV, typename KQ>    
//   bool 
//   svt::Solver<FV, KQ>::
//   is_lower_bound(int i) const
//   { 
//     return alpha_status[i]==LOWER_BOUND; 
//   }
//   
//    template< typename FV, typename KQ>      
//   bool 
//   svt::Solver<FV, KQ>::
//   is_free(int i) const 
//   { 
//     return alpha_status[i]==FREE; 
//   }
//   
//   template< typename FV, typename KQ>   
//   void 
//   svt::Solver<FV, KQ>::
//   swap_index(
//       int i, 
//       int j)
//   {
//     p_Q->swap_index(i, j);
//     std::swap(y[i], y[j]);
//     std::swap(G[i], G[j]);
//     std::swap(alpha_status[i], alpha_status[j]);
//     std::swap(alpha[i], alpha[j]);
//     std::swap(b[i], b[j]);
//     std::swap(active_set[i], active_set[j]);
//     std::swap(G_bar[i], G_bar[j]);
//   }
//   
//   template< typename FV, typename KQ>   
//   void 
//   svt::Solver<FV, KQ>::
//   reconstruct_gradient()
//   {
//     // reconstruct inactive elements of G from G_bar and free variables
//     if (active_size==l) return;
//               
//     for (int i=active_size; i<l; i++)
//         G[i]=G_bar[i]+b[i];
//               
//     for (int i=0; i<active_size; i++)
//         if (is_free(i))
//         {
//           float* Q_i=p_Q->get_Q(i, l);
//           double alpha_i=alpha[i];
//           for (int j=active_size; j<l; j++)
//               G[j]+=alpha_i*Q_i[j];
//         }
//   }
//   
//   template< typename FV, typename KQ>   
//   int 
//   svt::Solver<FV, KQ>::
//   select_working_set(
//       int &out_i, 
//       int &out_j) const
//   {
//     // return i,j which maximize -grad(f)^T d , under constraint
//     // if alpha_i == C, d != +1
//     // if alpha_i == 0, d != -1
//               
//     double Gmax1=-INF;// max { -grad(f)_i * d | y_i*d=+1 }
//     int Gmax1_idx=-1;
//               
//     double Gmax2=-INF;// max { -grad(f)_i * d | y_i*d=-1 }
//     int Gmax2_idx=-1;
//               
//     for (int i=0; i<active_size; i++)
//     {
//       if (y[i]==+1)	// y=+1
//       {
//         if (!is_upper_bound(i))	// d=+1
//         {
//           if (-G[i]>Gmax1)
//           {
//             Gmax1=-G[i];
//             Gmax1_idx=i;
//           }
//         }
//         if (!is_lower_bound(i))	// d=-1
//         {
//           if (G[i]>Gmax2)
//           {
//             Gmax2=G[i];
//             Gmax2_idx=i;
//           }
//         }
//       }
//       else		// y=-1
//       {
//         if (!is_upper_bound(i))	// d=+1
//         {
//           if (-G[i]>Gmax2)
//           {
//             Gmax2=-G[i];
//             Gmax2_idx=i;
//           }
//         }
//         if (!is_lower_bound(i))	// d=-1
//         {
//           if (G[i]>Gmax1)
//           {
//             Gmax1=G[i];
//             Gmax1_idx=i;
//           }
//         }
//       }
//     }
//               
//     if (Gmax1+Gmax2<eps) return 1;
//               
//     out_i=Gmax1_idx;
//     out_j=Gmax2_idx;
//     return 0;
//   }
//   
//   template< typename FV, typename KQ>   
//   void
//   svt::Solver<FV, KQ>::
//   calculate_rho( SolutionInfo& si)
//   {
//     double r;
//     int nr_free=0;
//     double ub=INF, lb=-INF, sum_free=0;
//     for (int i=0; i<active_size; i++)
//     {
//       double yG=y[i]*G[i];
//                 
//       if (is_lower_bound(i))
//       {
//         if (y[i]>0)
//             ub=std::min(ub, yG);
//         else
//             lb=std::max(lb, yG);
//       }
//       else if (is_upper_bound(i))
//       {
//         if (y[i]<0)
//             ub=std::min(ub,yG);
//         else
//             lb=std::max(lb,yG);
//       }
//       else
//       {
//         ++nr_free;
//         sum_free+=yG;
//       }
//     }
//               
//     if (nr_free>0)
//         r=sum_free/nr_free;
//     else
//         r=(ub+lb)/2;
//               
//     si.rho = r;
//   }
//       
//   template< typename FV, typename KQ>   
//   void 
//   svt::Solver<FV, KQ>::
//   do_shrinking()
//   {
//     int i, j;
//     if (select_working_set(i, j)!=0) return;
//     double Gm1=-y[j]*G[j];
//     double Gm2=y[i]*G[i];
//               
//     // shrink
//               
//     for (int k=0; k<active_size; k++)
//     {
//       if (is_lower_bound(k))
//       {
//         if (y[k]==+1)
//         {
//           if (-G[k]>=Gm1) continue;
//         }
//         else if (-G[k]>=Gm2) continue;
//       }
//       else if (is_upper_bound(k))
//       {
//         if (y[k]==+1)
//         {
//           if (G[k]>=Gm2) continue;
//         }
//         else if (G[k]>=Gm1) continue;
//       }
//       else continue;
//                 
//       --active_size;
//       swap_index(k, active_size);
//       --k;	// look at the newcomer
//     }
//               
//     // unshrink, check all variables again before final iterations
//               
//     if (unshrinked || -(Gm1+Gm2)>eps*10) return;
//               
//     unshrinked=true;
//     reconstruct_gradient();
//               
//     for (int k=l-1; k>=active_size; k--)
//     {
//       if (is_lower_bound(k))
//       {
//         if (y[k]==+1)
//         {
//           if (-G[k]<Gm1) continue;
//         }
//         else if (-G[k]<Gm2) continue;
//       }
//       else if (is_upper_bound(k))
//       {
//         if (y[k]==+1)
//         {
//           if (G[k]<Gm2) continue;
//         }
//         else if (G[k]<Gm1) continue;
//       }
//       else continue;
//                 
//       swap_index(k, active_size);
//       active_size++;
//       ++k;	// look at the newcomer
//     }
//   }
