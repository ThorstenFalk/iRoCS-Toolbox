/**************************************************************************
 *
 * Copyright (C) 2004-2015 Olaf Ronneberger, Florian Pigorsch, JÃ¶rg Mechnich,
 *                         Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/

/**************************************************************************
**       Title: 
**    $RCSfile$
**   $Revision: 476 $$Name$
**       $Date: 2004-08-26 10:36:59 +0200 (Thu, 26 Aug 2004) $
**   Copyright: LGPL $Author: ronneber $
** Description:
**
**    
**
**-------------------------------------------------------------------------
**
**  $Log$
**  Revision 1.1  2004/08/26 08:36:59  ronneber
**  initital import
**
**  Revision 1.2  2002/09/05 13:16:04  pigorsch
**  *** empty log message ***
**
**  Revision 1.1  2002/09/04 10:29:57  pigorsch
**  - initial revision, copied from libpollenpp and modified
**
**
**
**************************************************************************/

svt::SVMAdapter* 
svt::SVMFactory::
createSVM(
    const std::string& multiClassType,
    const std::string& svmType,
    const std::string& kernelType)
{
  return selectKernel(multiClassType, svmType, kernelType);
}
/*
template<typename KF>
static
svt::SVMAdapter* 
svt::SVMFactory::
selectTwoClassSVMType(
    const std::string& multiClassType,
    const std::string& svmType)
{
  SVMAdapter* svm;
  if (svmType=="c_svc")
  {
    svm=selectMultiClassType<svt::TwoClassSVMc, KF>(multiClassType);
  }
  else if (svmType=="nu_svc")
  {
    svm=selectMultiClassType<svt::TwoClassSVMnu, KF>(multiClassType);
  }
  else
  {
    svt::SVMAdapter::WrongParameterError e;
    e << "Unknown SVM Type `" << svmType << "'";
    throw e;
  }

  return svm;
}

    
template<template<typename> class TwoClassSVMType, typename KF>
static
svt::SVMAdapter* 
svt::SVMFactory::
selectMultiClassType(
    const std::string& multiClassType)
{
  SVMAdapter* svm;
  if (multiClassType=="one_vs_one")
  {
    svm=new svt::SVMOneVsOneAdapterTempl<TwoClassSVMType, KF>;
  }
  else if (multiClassType=="one_vs_rest")
  {
    svm=new svt::SVMOneVsRestAdapterTempl<TwoClassSVMType, KF>;
  }
  else
  {
    svt::SVMAdapter::WrongParameterError e;
    e << "Unknown multi class SVM type `" << multiClassType << "'";
    throw e;
  }

  return svm;
}
*/
