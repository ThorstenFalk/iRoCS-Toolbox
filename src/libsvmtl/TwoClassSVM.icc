/**************************************************************************
 *
 * Copyright (C) 2004-2015 Olaf Ronneberger, Florian Pigorsch, JÃ¶rg Mechnich,
 *                         Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/

/**************************************************************************
**       Title: abstract two class SVM
**    $RCSfile$
**   $Revision: 476 $$Name$
**       $Date: 2004-08-26 10:36:59 +0200 (Thu, 26 Aug 2004) $
**   Copyright: LGPL $Author: ronneber $
** Description:
**
**    
**
**-------------------------------------------------------------------------
**
**  $Log$
**  Revision 1.1  2004/08/26 08:36:59  ronneber
**  initital import
**
**  Revision 1.7  2003/05/19 11:26:20  ronneber
**  - added verboseLevel
**
**  Revision 1.6  2002/06/07 11:38:31  ronneber
**  - made ModelType in classify() an own template parameter to make
**    it more flexible (e.g. when using a slightly different but
**    compatible Feature Vector class)
**
**  Revision 1.5  2002/05/22 16:53:52  ronneber
**  - added missing const version of kernel()
**
**  Revision 1.4  2002/05/13 16:26:55  ronneber
**  - adapted to new Model class (without public attributes)
**
**  Revision 1.3  2002/05/10 11:07:03  ronneber
**  - removed FV template for all public classes, because Feature Vector type
**    can be extracted automatically from passed iterators or other
**    parameters -- this makes the public interface much more intuitive
**
**  Revision 1.2  2002/05/06 13:35:03  ronneber
**  - feature vector will not be copied anymore for classify()
**  - added default values for _terminationEpsilon, _cacheSizeBytes and
**    _shrinkingFlag (same as inf original libsvm)
**
**  Revision 1.1  2002/03/26 12:44:02  ronneber
**  restructured for autoconf
**
**  Revision 1.6  2002/03/13 14:06:46  pigorsch
**  * this is now an abstract base class
**
**  Revision 1.5  2002/03/11 17:15:47  mechnich
**  modified some expressions to increase standard conformity (for compilation under Win32)
**
**  Revision 1.4  2002/03/08 11:44:50  pigorsch
**  * use new Model and SupportVector classes. Old code is marked with //xxx
**
**  Revision 1.3  2002/01/31 10:37:39  pigorsch
**  * rejected last changes
**
**
**
**************************************************************************/




/*=========================================================================
 *  DESCRIPTION OF FUNCTION:  calcClassificationCache
 *  ==> see headerfile
 *=======================================================================*/
template< typename KF>
template< typename FV, typename ForwardIter>
void svt::TwoClassSVM<KF>::calcClassificationCache( 
    const FV& testObject, 
    const ForwardIter& SVP_begin,  
    const ForwardIter& SVP_end,
    std::vector<double>& kernelResultByUID) const
{
  CHECK_MEMBER_TEMPLATE_2PARAM( svt_check::RequireKernel_k_function<KF,FV>);
  CHECK_MEMBER_TEMPLATE( svt_check::RequireFeatureVectorUniqueID<FV>);
  CHECK_MEMBER_TEMPLATE( svt_check::RequireForwardIter<ForwardIter>);

  for( ForwardIter p = SVP_begin; p != SVP_end; ++p)
  {
    unsigned int i = (*p)->uniqueID();
    SVM_ASSERT( i <= kernelResultByUID.size());
    kernelResultByUID[i] = this->p_kernel.k_function( testObject, **p);
  }  
}


/*=========================================================================
 *  DESCRIPTION OF FUNCTION:  classifyWithCache
 *  ==> see headerfile
 *=======================================================================*/
template< typename KF>
template< typename FV>
double svt::TwoClassSVM<KF>::classifyWithCache( 
    const Model<FV>& model,
    const std::vector<double>& kernelResultByUID) const
{
  CHECK_MEMBER_TEMPLATE( svt_check::RequireFeatureVectorUniqueID<FV>);

  double sum = 0;
  for( unsigned int i = 0; i < model.size(); ++i)
  {
    const FV* fv = model.supportVector(i);
    unsigned int uid = fv->uniqueID();
    SVM_ASSERT( uid < kernelResultByUID.size());

    sum += model.alpha(i) * kernelResultByUID[uid];
  }
  sum -= model.rho();
  return sum;
}




