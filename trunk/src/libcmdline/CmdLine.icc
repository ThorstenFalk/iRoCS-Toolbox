/**************************************************************************
 *
 * Copyright (C) 2005-2015 Olaf Ronneberger, JÃ¶rg Mechnich, Florian Pigorsch,
 *                         Mario Emmenlauer, Thorsten Schmidt
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/

inline
std::string
CmdLine::
name() const
{
  return pName;
}

inline
void
CmdLine::
name(const std::string& value)
{
  pName=basename(value);
}

inline
std::string
CmdLine::
longname() const
{
  return pLongName;
}

inline
void
CmdLine::
longname(const std::string& value)
{
  pLongName=value;
}

inline
std::string
CmdLine::
description() const
{
  return pDescription;
}

inline
void
CmdLine::
description(const std::string& value)
{
  pDescription=value;
}

inline
CmdLine&
CmdLine::
append(CmdArg& cmdarg)
{
  return append(&cmdarg);
}

inline
std::ostream&
CmdLine::
usage() const
{
  return usage(error());
}

inline
CmdLine::CmdLineStatus
CmdLine::
status() const
{
  return pStatus;
}

inline
void
CmdLine::
status(CmdLine::CmdLineStatus s)
{
  pStatus=s;
}

inline
void
CmdLine::
setStatus(CmdLine::CmdLineStatus s)
{
  status(CmdLine::CmdLineStatus(status() | s));
}

inline
bool
CmdLine::
hasStatus(CmdLine::CmdLineStatus s) const
{
  return ((status() & s) != 0);
}

inline
CmdLine::CmdLineState
CmdLine::
state() const
{
  return pState;
}

inline
void
CmdLine::
state(CmdLine::CmdLineState s)
{
  pState=s;
}

inline
void
CmdLine::
setState(CmdLine::CmdLineState s)
{
  state(CmdLine::CmdLineState(state() | s));
}

inline
void
CmdLine::
clearState(CmdLine::CmdLineState s)
{
  state(CmdLine::CmdLineState(state() & ~s));
}

inline
bool
CmdLine::
hasState(CmdLine::CmdLineState s) const
{
  return ((state() & s) != 0);
}

inline
CmdLine::CmdLineFlags
CmdLine::
flags() const
{
  return pFlags;
}

inline
void
CmdLine::
flags(CmdLine::CmdLineFlags f)
{
  pFlags=f;
}

inline
void
CmdLine::
setFlags(CmdLine::CmdLineFlags f)
{
  flags(CmdLine::CmdLineFlags(f | flags()));
}

inline
void
CmdLine::
clearFlags(CmdLine::CmdLineFlags f)
{
  flags(CmdLine::CmdLineFlags(flags() & ~f));
}

inline
bool
CmdLine::
hasFlag(CmdLine::CmdLineFlags f) const
{
  return ((flags() & f) != 0);
}

inline
std::ostream&
CmdLine::
error() const
{
  std::ostream* os=(pErr) ? pErr : &std::cerr;
  return *os;
}

inline
void
CmdLine::
error(std::ostream& os)
{
  pErr=&os;
}

inline
unsigned int
CmdLine::
nargsParsed() const
{
  return pNArgsParsed;
}

inline
CmdArg*
CmdLine::
getArg(char optchar) const
{
  return matchShort(optchar);
}

inline
CmdArg*
CmdLine::
getArg(const std::string& keyword) const
{
  bool ambig=false;
  return matchLong(keyword, -1, ambig);
}

inline
bool
CmdLine::
isShort(const char* s)
{
  return ((*(s)=='-')
          && ((*((s)+1)!='-'))
          && ((*((s)+1)) < '0' || (*((s)+1) > '9'))
          && ((*((s)+1)!='\0')));
}

inline
bool
CmdLine::
isLong(const char* s)
{
  return ((*(s)=='-') && (*((s)+1)=='-') && (*((s)+2)!='\0'));
}

inline
bool
CmdLine::
isEndOfOptions(const char *s)
{
  return ((*(s)=='-') && (*((s)+1)=='-') && (*((s)+2)=='\0'));
}
