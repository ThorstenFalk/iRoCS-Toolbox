/**************************************************************************
 *
 * Copyright (C) 2004-2015 Olaf Ronneberger, Florian Pigorsch, JÃ¶rg Mechnich,
 *                         Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/



/*=========================================================================
 *  DESCRIPTION OF FUNCTION:  setValue
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
void svt::StDataASCII::setValue( const std::string& key, const T& value)
{
  std::ostringstream oss;
  setPrecisionForType( oss, value);
  oss << value;
  _map[key]=oss.str();
}



/*=========================================================================
 *  DESCRIPTION OF FUNCTION:  setArray
 *  ==> see headerfile
 *=======================================================================*/
template<typename ForwardIter>
void svt::StDataASCII::setArray( const std::string& key, 
                                 const ForwardIter& arrBegin,
                                 size_t size)
{
  std::ostringstream oss;
  oss << "[" << size << "]";
  ForwardIter p = arrBegin; 
  setPrecisionForType( oss, *p);
  for( size_t i = 0; i < size; ++i, ++p)
  {
    if( i != 0) oss << separatorChar();
    oss << *p;
  }
  _map[key]=oss.str();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:  setFVArray
 *  ==> see headerfile
 *=======================================================================*/
template<typename ForwardIter>
void svt::StDataASCII::setFVArray( const std::string& key, 
                                   const ForwardIter& arrBegin,
                                   size_t size)
{
  std::ostringstream oss;
  oss << "[" << size << "]";
  ForwardIter p = arrBegin; 
  setPrecisionForType( oss, **p);
  for( size_t i = 0; i < size; ++i, ++p)
  {
    if( i != 0) oss << separatorChar();
    oss << **p;
  }
  _map[key]=oss.str();
}



/*=========================================================================
 *  DESCRIPTION OF FUNCTION: getValue
 *  ==> see headerfile
 *=======================================================================*/
template<typename T> 
void svt::StDataASCII::getValue( const std::string& key, T& value) const
{
  std::map<std::string, std::string>::const_iterator p = findKey(key);
  if (p == _map.end()) return;
  stringToValue( p->second, value);
}



/*=========================================================================
 *  DESCRIPTION OF FUNCTION: getArray
 *  ==> see headerfile
 *=======================================================================*/
template<typename ForwardIter> 
void svt::StDataASCII::getArray( const std::string& key, 
                                 const ForwardIter& arrBegin, 
                                 int containerSize) const
{
  std::map<std::string, std::string>::const_iterator p = findKey(key);
  if (p == _map.end()) return;
  
  std::istringstream ist( p->second);
  std::string s;
  
  // get size
  size_t size = 0;
  readArraySizeFromStream( ist, size);
  
  int index = 0;
  ForwardIter iter = arrBegin;
  while( std::getline(ist, s, separatorChar()))
  {
    if( containerSize != -1 && index >= containerSize)
    {
      ContainerTooSmallError err;
      err << "tried to load more than " << containerSize << " values (key = '" 
        << key <<"') into a container of size " << containerSize;
      throw err;
    }
    
    stringToValue( s, *iter);
    ++iter;
    ++index;
  }
  if( containerSize != -1 && index != containerSize)
  {
    NotEnoughValuesError err;
    err << "tried to load " << containerSize << " values (key = '" 
        << key <<"') into a container but got only" << index;
    throw err;
  }
    
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION: getFVArray
 *  ==> see headerfile
 *=======================================================================*/
template<typename ForwardIter> 
void svt::StDataASCII::getFVArray( const std::string& key, 
                                   const ForwardIter& arrBegin, 
                                   int containerSize) const
{
  std::map<std::string, std::string>::const_iterator p = findKey(key);
  if (p == _map.end()) return;
  
  std::istringstream ist( p->second);
  std::string s;
  
  // get size
  size_t size = 0;
  readArraySizeFromStream( ist, size);
  
  int index = 0;
  ForwardIter iter = arrBegin;
  while( std::getline(ist, s, separatorChar()))
  {
    if( containerSize != -1 && index >= containerSize)
    {
      ContainerTooSmallError err;
      err << "tried to load more than " << containerSize << " values (key = '" 
        << key <<"') into a container of size " << containerSize;
      throw err;
    }
    
    stringToValue( s, **iter);
    ++iter;
    ++index;
  }
  if( containerSize != -1 && index != containerSize)
  {
    NotEnoughValuesError err;
    err << "tried to load " << containerSize << " values (key = '" 
        << key <<"') into a container but got only" << index;
    throw err;
  }
    
}

