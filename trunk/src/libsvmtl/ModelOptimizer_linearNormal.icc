/**************************************************************************
 *
 * Copyright (C) 2004-2015 Olaf Ronneberger, Florian Pigorsch, JÃ¶rg Mechnich,
 *                         Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/


template <typename FV>
template <typename MODEL>
void ModelOptimizer_linearNormal<FV>::optimizeModel(MODEL& model)
{
    //calc normals
    _reducedSV.clear();
    for (unsigned int i =0;i< model.nTwoClassModels();++i)
    {
	_reducedSV.push_back(optimizeTwoClassModel(model.twoClassModel(i),i));
    }

    //kill old model
    model.freeCollectedSupportVectors();
    model.resizeCollectedSupportVectors(model.nTwoClassModels());
    model.collectSupportVectorsFromTCModels();

}

template <typename FV>
template <typename TWO_MODEL>
FV* ModelOptimizer_linearNormal<FV>::optimizeTwoClassModel(TWO_MODEL& model, int uid)
{
    //calc normal
    FV* w = new FV;
    w->resize(model.supportVector(0)->size());
    w->setZero();
    for (unsigned int i=0;i<model.size(); ++i)
    {
	FV tmp;
	tmp.resize(model.supportVector(i)->size());
	tmp.setZero();
	tmp += *model.supportVector(i);
	tmp *= model.alpha(i);
	*w += tmp;
    }

    w->setUniqueID(uid);

    //model.free_memory();
    model.resize(1);
    model.setSupportVector(0, w, 1.0);
    
    return w;
}

